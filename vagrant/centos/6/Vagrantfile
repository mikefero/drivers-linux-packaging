# -*- mode: ruby -*-
# vi: set ft=ruby :
require "fileutils"

# Ensure provisioning arguments are set
if !ENV.has_key?("LIBUV")
  raise "libuv Version is Required: Set `LIBUV` environment variable"
end
if !ENV.has_key?("CORE") and !ENV.has_key?("DSE")
  raise "Driver Version is Required: Set `CORE` and/or `DSE` environment variable"
end

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Inline provision script
CPP_DRIVER_PROVISION_SCRIPT = <<EOF
#!/bin/bash

# Retrieve the version variables from the provisioning arguments
LIBUV_VERSION=${1}
CPP_DRIVER_VERSION=${2}
CPP_DSE_DRIVER_VERSION=${3}
CPP_DSE_DRIVER_PREFIX=https://github.com/
CPP_DSE_DRIVER_REPO=datastax
if [ -f /home/vagrant/.ssh/id_rsa ]
then
  CPP_DSE_DRIVER_PREFIX=git@github.com:
  CPP_DSE_DRIVER_REPO=riptano

  sudo su vagrant << VAGRANT_USER_EOF
  # Disable strict host checking
cat >> /home/vagrant/.ssh/config << SSH_CONFIG_EOF
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
SSH_CONFIG_EOF
  chmod 700 /home/vagrant/.ssh
  chmod 400 /home/vagrant/.ssh/config
  chmod 400 /home/vagrant/.ssh/*id_rsa
VAGRANT_USER_EOF
fi

# Install package updates
printf "Installing System Packages ...\\n"
yum -q -y install automake buildsys-macros cmake gcc-c++ git libtool openssl-devel pkgconfig redhat-rpm-config rpm-build > /dev/null 2>&1

sudo su vagrant << VAGRANT_USER_EOF
# Create a directory for the packages
mkdir -p packages/libuv
mkdir -p packages/cpp-driver

# Download, build, package, and install libuv
printf "Building libuv Packages [${LIBUV_VERSION}] ...\\n"
git clone --depth 1 https://github.com/mpenick/libuv-packaging.git libuv-packaging > packages/libuv-v${LIBUV_VERSION}-build.log 2>&1
pushd libuv-packaging > /dev/null 2>&1
./build_rpm.sh ${LIBUV_VERSION} >> ../packages/libuv-v${LIBUV_VERSION}-build.log 2>&1
cp -f build/RPMS/x86_64/libuv-*.rpm ../packages/libuv
popd > /dev/null 2>&1
sudo rpm -i packages/libuv/libuv-*.rpm

# Download, build, and package DataStax C/C++ DSE driver
if [ -n "${CPP_DRIVER_VERSION}" ]
then
  printf "Building C/C++ Driver Packages [${CPP_DRIVER_VERSION}] ...\\n"
  git clone --depth 1 --branch ${CPP_DRIVER_VERSION} https://github.com/datastax/cpp-driver.git cpp-driver > packages/cpp-driver-v${CPP_DRIVER_VERSION}-build.log 2>&1
  pushd cpp-driver/packaging > /dev/null 2>&1
  ./build_rpm.sh >> ../../packages/cpp-driver-v${CPP_DRIVER_VERSION}-build.log 2>&1
  cp -f build/RPMS/x86_64/cassandra-cpp-driver-*.rpm ../../packages/cpp-driver
  popd > /dev/null 2>&1
fi

# Download, build, and package DataStax C/C++ DSE driver
if [ -n "${CPP_DSE_DRIVER_VERSION}" ]
then
  printf "Building C/C++ DSE Driver Packages [${CPP_DSE_DRIVER_REPO}] [${CPP_DSE_DRIVER_VERSION}] ...\\n"
  mkdir -p packages/cpp-dse-driver
  git clone --depth 1 --branch ${CPP_DSE_DRIVER_VERSION} ${CPP_DSE_DRIVER_PREFIX}${CPP_DSE_DRIVER_REPO}/cpp-dse-driver.git cpp-dse-driver > packages/cpp-dse-driver-v${CPP_DSE_DRIVER_VERSION}-build.log 2>&1
  pushd cpp-dse-driver > /dev/null 2>&1
  git submodule update --init --recursive  > /dev/null 2>&1
  pushd ../cpp-dse-driver/packaging > /dev/null 2>&1
  ./build_rpm.sh >> ../../packages/cpp-dse-driver-v${CPP_DSE_DRIVER_VERSION}-build.log 2>&1
  cp -f build/RPMS/x86_64/dse-cpp-driver-*.rpm ../../packages/cpp-dse-driver
  popd > /dev/null 2>&1
  popd > /dev/null 2>&1
fi
VAGRANT_USER_EOF
EOF

##
# Configure a Virtual Machine (VM) for building C/C++ driver packages with the
# following settings:
#
#     - 2GB of RAM
#     - 32MB of Video RAM
#     - 4 cores (CPUs)
#     - Hostname: cpp-driver-6-9
#     - Username: vagrant
#     - Password: vargrant
#     - 1 Network Interfaces Cards (NICs)
#       + IP: 192.168.10.11
##
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Create CentOS 6.9 VM
  config.vm.box = "bento/centos-6.9"

  # Determine if caching can be enabled
  # This can be enabled by installing the `vagrant-cachier` plugin
  #   vagrant plugin install vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  # Define the hostname and IP address
  config.vm.define "centos_6-9" do |cpp_driver|
    cpp_driver.vm.hostname = "cpp-driver-6-9"
    cpp_driver.vm.network "private_network", ip: "192.168.10.11", auto_config: false
  end

  # Define shared/synced folder for package builds to be placed
  Dir.mkdir("../../../packages/centos/6") unless FileUtils::mkdir_p("../../../packages/centos/6")
  config.vm.synced_folder "../../../packages/centos/6", "/home/vagrant/packages"

  # Setup use for private or public repository
  if File.exist?("../../../id_rsa") then
    config.vm.provision :file do |private_key|
      private_key.source = "../../../id_rsa"
      private_key.destination = "/home/vagrant/.ssh/id_rsa"
    end
  end

  # Prepare/Provision the VM
  config.vm.provision :shell do |root_provision|
    root_provision.privileged = true
    root_provision.inline = CPP_DRIVER_PROVISION_SCRIPT
    root_provision.args = [ "#{ENV['LIBUV']}", "#{ENV['CORE']}", "#{ENV['DSE']}" ]
  end

  # VM parameters for the C/C++ driver test VM machine
  config.vm.provider :virtualbox do |provider|
    provider.name = "centos-6-9"
    provider.customize ["modifyvm", :id, "--groups", "/Drivers/Packaging"]
    provider.customize ["modifyvm", :id, "--memory", "2048"]
    provider.customize ["modifyvm", :id, "--vram", "32"]
    provider.customize ["modifyvm", :id, "--cpus", "4"]   
    provider.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    provider.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    provider.customize ["modifyvm", :id, "--nictype1", "82543GC"]
    provider.customize ["modifyvm", :id, "--cableconnected1", "on"]
  end
end
